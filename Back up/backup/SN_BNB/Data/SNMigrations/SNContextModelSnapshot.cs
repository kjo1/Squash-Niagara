// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SN_BNB.Data;

namespace SN_BNB.Data.SNMigrations
{
    [DbContext(typeof(SNContext))]
    partial class SNContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SN")
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SN_BNB.Models.ApprovedBy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("TeamScoreID");

                    b.Property<int>("TeamScoresID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("TeamScoreID");

                    b.HasIndex("UserID");

                    b.ToTable("Approved");
                });

            modelBuilder.Entity("SN_BNB.Models.Division", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DivisionName")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("DivisionName")
                        .IsUnique();

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("SN_BNB.Models.Fixture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AwayScore");

                    b.Property<int>("AwayTeamID");

                    b.Property<DateTime>("Datetime");

                    b.Property<int>("HomeScore");

                    b.Property<int>("HomeTeamID");

                    b.Property<int>("LocationID");

                    b.Property<int>("SeasonID");

                    b.HasKey("ID");

                    b.HasIndex("LocationID")
                        .IsUnique();

                    b.HasIndex("SeasonID");

                    b.ToTable("Fixtures");
                });

            modelBuilder.Entity("SN_BNB.Models.Fixture_has_Team", b =>
                {
                    b.Property<int>("TeamID");

                    b.Property<int>("FixtureID");

                    b.HasKey("TeamID", "FixtureID");

                    b.HasIndex("FixtureID");

                    b.ToTable("Fixture_has_Team");
                });

            modelBuilder.Entity("SN_BNB.Models.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<string>("City")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("SN_BNB.Models.Match", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Datetime");

                    b.Property<int>("FixtureID");

                    b.HasKey("ID");

                    b.HasIndex("FixtureID");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("SN_BNB.Models.MatchScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MatchScoresPoints");

                    b.Property<int>("PlayerID");

                    b.HasKey("ID");

                    b.HasIndex("PlayerID");

                    b.ToTable("MatchScores");
                });

            modelBuilder.Entity("SN_BNB.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Gender")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50);

                    b.Property<long>("Phone");

                    b.Property<int>("Position");

                    b.Property<int>("TeamID");

                    b.HasKey("ID");

                    b.HasIndex("TeamID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SN_BNB.Models.Season", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("SeasonEnd");

                    b.Property<DateTime>("SeasonStart");

                    b.Property<string>("Season_Title")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("SN_BNB.Models.Season_has_Team", b =>
                {
                    b.Property<int>("TeamID");

                    b.Property<int>("SeasonID");

                    b.HasKey("TeamID", "SeasonID");

                    b.HasIndex("SeasonID");

                    b.ToTable("SeasonTeams");
                });

            modelBuilder.Entity("SN_BNB.Models.Team", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DivisionID");

                    b.Property<DateTime?>("TeamCreatedOn");

                    b.Property<string>("TeamName")
                        .IsRequired();

                    b.Property<int>("TeamPoints");

                    b.HasKey("ID");

                    b.HasIndex("DivisionID");

                    b.HasIndex("TeamName")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SN_BNB.Models.TeamScore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FixtureID");

                    b.Property<string>("FixtureScore")
                        .IsRequired();

                    b.Property<int>("TeamID");

                    b.HasKey("ID");

                    b.HasIndex("FixtureID");

                    b.HasIndex("TeamID");

                    b.ToTable("TeamScores");
                });

            modelBuilder.Entity("SN_BNB.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserRole")
                        .IsRequired();

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SN_BNB.Models.ApprovedBy", b =>
                {
                    b.HasOne("SN_BNB.Models.TeamScore", "TeamScore")
                        .WithMany("ApprovedBys")
                        .HasForeignKey("TeamScoreID");

                    b.HasOne("SN_BNB.Models.User", "User")
                        .WithMany("ApprovedBys")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SN_BNB.Models.Fixture", b =>
                {
                    b.HasOne("SN_BNB.Models.Location", "Location")
                        .WithOne("Fixture")
                        .HasForeignKey("SN_BNB.Models.Fixture", "LocationID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SN_BNB.Models.Season", "Season")
                        .WithMany("Fixtures")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SN_BNB.Models.Fixture_has_Team", b =>
                {
                    b.HasOne("SN_BNB.Models.Fixture", "Fixture")
                        .WithMany("Fixture_Has_Teams")
                        .HasForeignKey("FixtureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SN_BNB.Models.Team", "Team")
                        .WithMany("Fixture_has_Teams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SN_BNB.Models.Match", b =>
                {
                    b.HasOne("SN_BNB.Models.Fixture", "Fixture")
                        .WithMany("Matches")
                        .HasForeignKey("FixtureID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SN_BNB.Models.MatchScore", b =>
                {
                    b.HasOne("SN_BNB.Models.Player", "Player")
                        .WithMany("MatchScores")
                        .HasForeignKey("PlayerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SN_BNB.Models.Player", b =>
                {
                    b.HasOne("SN_BNB.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SN_BNB.Models.Season_has_Team", b =>
                {
                    b.HasOne("SN_BNB.Models.Season", "Season")
                        .WithMany("Teams")
                        .HasForeignKey("SeasonID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SN_BNB.Models.Team", "Team")
                        .WithMany("Season_has_Teams")
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SN_BNB.Models.Team", b =>
                {
                    b.HasOne("SN_BNB.Models.Division", "Division")
                        .WithMany("Teams")
                        .HasForeignKey("DivisionID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SN_BNB.Models.TeamScore", b =>
                {
                    b.HasOne("SN_BNB.Models.Fixture", "Fixture")
                        .WithMany("TeamScores")
                        .HasForeignKey("FixtureID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SN_BNB.Models.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
